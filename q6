q6
	"Question q6"
	
	<example>
	| s  matrice1 matrice2 split1 split2 split3 split4 split5 split6 join1 join2 join3 join4 join5 mult1 mult2 mult3 mult4 add1 add2 add3 add4 x reader doubleJeton1 doubleJeton2  |
	s := TauCSystem new.
	split1 := s newSplit1to: 2 by: 3.
	split2 := s newSplit1to: 2 by: 2.
	split3 := s newSplit1to: 2 by: 3.
	split4 := s newSplit1to: 2 by: 3.
	split5 := s newSplit1to: 2 by: 1.
	split6 := s newSplit1to: 2 by: 1.
	
	join1:= s newJoin: 2 to1by: 1.
	join2 := s newJoin: 2 to1by: 1.
	join3 := s newJoin: 2 to1by: 1.
	join4 := s newJoin: 2 to1by: 1.
	join5 := s newJoin: 4 .
	
	matrice1 := (s newTask: 'matrice1')
		out: #send;
		state: #main -> #(#send 6)
			do: [ :send | 
			send at: 1 put: 1.
			send at: 2 put: 2.
			send at: 3 put: 0.
			send at: 4 put: 4.
			send at: 5 put: 3.
			send at: 6 put: -1.
			matrice1 next: #exit ].
		
	matrice2 := (s newTask: 'matrice2')
		out: #send;
		state: #main -> #(#send 6)
			do: [ :send | 
			send at: 1 put: 5.
			send at: 2 put: 1.
			send at: 3 put: 2.
			send at: 4 put: 3.
			send at: 5 put: 3.
			send at: 6 put: 4.
			matrice2 next: #exit ].
		
	mult1 := (s newTask: 'mult1')
		in: #read;
		out: #send;
		state: #main -> #(#send #read 2)
			do: [ :send :read | 
			x := read first * read second.
			send at: 1 put: x.
			('mult:  ' , read first printString, ' * '
			,read second printString, ' = '
			,x printString) logCr ].
		
	add1 := (s newTask: 'add1')
		in: #read;
		out: #send;
		state: #main -> #(#send #read 3)
			do: [ :send :read | 
			x := read first + read second + read third.
			send at: 1 put: x.
			('add1   ' , read first printString, ' + '
			,read second printString, ' + '
			,read third printString , ' = '
			,x printString) logCr ].
		
	mult2 := (s newTask: 'mult2')
		in: #read;
		out: #send;
		state: #main -> #(#send #read 2)
			do: [ :send :read | 
			x := read first * read second.
			send at: 1 put: x.
			('mult:  ' , read first printString, ' * '
			,read second printString, ' = '
			,x printString) logCr ].
		
	add2 := (s newTask: 'add2')
		in: #read;
		out: #send;
		state: #main -> #(#send #read 3)
			do: [ :send :read | 
			x := read first + read second + read third.
			send at: 1 put: x.
			('add1   ' , read first printString, ' + '
			,read second printString, ' + '
			,read third printString , ' = '
			,x printString) logCr ].
		
	mult3 := (s newTask: 'mult3')
		in: #read;
		out: #send;
		state: #main -> #(#send #read 2)
			do: [ :send :read | 
			x := read first * read second.
			send at: 1 put: x.
			('mult:  ' , read first printString, ' * '
			,read second printString, ' = '
			,x printString) logCr ].
		
	add3 := (s newTask: 'add3')
		in: #read;
		out: #send;
		state: #main -> #(#send #read 3)
			do: [ :send :read | 
			x := read first + read second + read third.
			send at: 1 put: x.
			('add1   ' , read first printString, ' + '
			,read second printString, ' + '
			,read third printString , ' = '
			,x printString) logCr ].
		
	mult4 := (s newTask: 'mult4')
		in: #read;
		out: #send;
		state: #main -> #(#send #read 2)
			do: [ :send :read | 
			x := read first * read second.
			send at: 1 put: x.
			('mult:  ' , read first printString, ' * '
			,read second printString, ' = '
			,x printString) logCr ].
		
	add4 := (s newTask: 'add4')
		in: #read;
		out: #send;
		state: #main -> #(#send #read 3)
			do: [ :send :read | 
			x := read first + read second + read third.
			send at: 1 put: x.
			('add1   ' , read first printString, ' + '
			,read second printString, ' + '
			,read third printString , ' = '
			,x printString) logCr ].
		
	doubleJeton1 := (s newTask: 'doubleJeton1')
		in: #read;
		out: #send;
		state: #main -> #(#(#send 6) #(#read 3))
			do: [ :send :read | 
			send at: 1 put: read first.
			send at: 2 put: read second.
			send at: 3 put: read third .
			send at: 4 put: read first.
			send at: 5 put: read second.
			send at: 6 put: read third.
			('double :   ' , read first printString, '  '
			,read second printString, '  '
			,read third printString , '  ') logCr ].
	
	doubleJeton2 := (s newTask: 'doubleJeton2')
		in: #read;
		out: #send;
		state: #main -> #(#(#send 2) #(#read 1)  )
			do: [ :send :read | 
			send at: 1 put: read first.
			send at: 2 put: read first.
			('double :   ' , read first printString, '  ') logCr ].
		
	reader := (s newTask: 'reader')
		in: #read;
		state: #main -> #(#read 4)
			do: [ :read | 
			('Reader received ' , read first printString, ' '
			,read second printString, ' '
			,read third printString, ' '
			,read fourth  printString, ' ' ) logCr ].
		
		
	matrice1 send >> doubleJeton1 read size: 9.
	doubleJeton1  send >> split1 input size: 6.
	
	matrice2 send >> doubleJeton2 read size: 9.
	doubleJeton2 send >> split2 input size: 2.
	
	split1 output first >> split3 input size: 3.
	split1 output second  >> split4 input size: 3.
	
	split2 output first >> split5 input size: 3.
	split2 output second  >> split6 input size: 3.
	
	split3 output first >> join1 input first size: 3.
	split3 output second >> join3 input first size: 3.
	
	split4 output first >> join2 input first size: 3.
	split4 output second >> join4 input first size: 3.
	
	split5 output first >> join1 input second size: 3.
	split5 output second >> join3 input second size: 3.
	
	split6 output first >> join2 input second size: 3.
	split6 output second >> join4 input second size: 3.
	
	join1 output >> mult1 read size: 6.
	mult1 send >>  add1 read size: 3.
	
	join2 output >> mult2 read size: 6.
	mult2 send >>  add2 read size: 3.
	
	join3 output >> mult3 read size: 6.
	mult3 send >>  add3 read size: 3.
	
	join4 output >> mult4 read size: 6.
	mult4 send >>  add4 read size: 3.
	
	add1 send >> join5 input first.
	add2 send >> join5 input second.
	add3 send >> join5 input third .
	add4 send >> join5 input fourth .
	
	join5 output >>  reader read size: 4.
	
	s fullyConnected.
	s exploreInRoassal.
	^ s 