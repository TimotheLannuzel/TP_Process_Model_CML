q5
	"Question q5"

	<example>
	| s join matrice vecteur reader mult x|
	s := TauCSystem new.
	join := s newJoin: 2.
	
	matrice := (s newTask: 'matrice')
		out: #send;
		state: #main -> #(#send 9)
			do: [ :send | 
			send at: 1 put: 1.
			send at: 2 put: 4.
			send at: 3 put: 7.
			send at: 4 put: 2.
			send at: 5 put: 5.
			send at: 6 put: 8.
			send at: 7 put: 3.
			send at: 8 put: 6.
			send at: 9 put: 9.
			"'Matrice send 1 4 7 2 5 8 3 6 9' logCr"].
		
	vecteur := (s newTask: 'vecteur')
		out: #send;
		state: #main -> #(#send 3)
			do: [ :send | 
			send at: 1 put: 5.
			send at: 2 put: 2.
			send at: 3 put: 3.
			"vecteur send 5 2 3' logCr "].
		
	mult := (s newTask: 'mult')
		in: #read ;
		out: #send;
		
		"state: 
			{ { #main.
				[ :in :out
					{  #(#read 2)
					do: [ :read :send   | 
						x := read first * read second.
						('mult received ' 
						, read first printString, ' '
						, read second  printString,' res:'
						, x printString ) logCr .
					].}
					send at: 1 put: x. 
					
					 } }"  
					
		"state:{{ #main .
			{#(#read 2) 
				do: [ :read :send   | 
				x := read first * read second.
				('mult received ' 
					, read first printString, ' '
					, read second  printString,' res:'
					, x printString ) logCr .
					send at: 1 put: x.
				].
		  		}}}."
		
	reader  End of statement list encountered ->:= (s newTask: 'reader')
		in: #read;
		state: #main -> #read
			do: [ :read | 
			('Reader received ' , read first printString ) logCr ].
		
		
	matrice send >> join input first size: 9.
	vecteur send >> join input second size:3.
	
	join output >> mult read size: 2.
	mult send >> reader read.
	s fullyConnected.
	s exploreInRoassal.
	^ s